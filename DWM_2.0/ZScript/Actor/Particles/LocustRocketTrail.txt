//------------------------------------------------------------------------------
//Rocket Trail
//------------------------------------------------------------------------------
Class RMD_LocustRocketTrail : RMD_BaseParticle
{
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 0 
			{
			
				let CVARS = RMD_CVARHandler(StaticEventHandler.Find('RMD_CVARHandler'));
				int CVAR_LowQuality = CVARS.RMDV_ParticleLowQuality;;
		
				if (CVAR_LowQuality == 1)
				{
					Return;
				}
				
				if (true)
				{
					Vector3 PVel = (FRandom[FX](-0.1, 0.1), FRandom[FX](-0.1, 0.1), FRandom[FX](0.75, 0.75));
					Vector3 RPos = (frandom(0, 0), frandom(0, 0), frandom(0, 0));
					RMD_BaseParticle Particle = RMD_BaseParticle(Spawn("RMD_Fire", Pos + RPos));
					
					Particle.Vel = PVel;
					Particle.Scale = (1.0, 1.0);
					Particle.ScaleGrowth = 0.90;
					Particle.A_SetRenderStyle(1.0, STYLE_AddShaded);
					Particle.SetShade("ff3900");
				}		
			
				if (true)
				{
					Vector3 PVel = (FRandom[FX](-0.1, 0.1), FRandom[FX](-0.1, 0.1), FRandom[FX](0.1, 0.3));
					Vector3 RPos = (frandom(0, 0), frandom(0, 0), frandom(0, 0));
					RMD_BaseParticle Particle = RMD_BaseParticle(Spawn("RMD_Smoke", Pos + RPos));
					
					Particle.Vel = PVel;
					Particle.Scale = (0.05, 0.05);
					Particle.ScaleGrowth = 1.0;
					Particle.TTL = 25;
					Particle.A_SetRenderStyle(1.0, STYLE_AddShaded);
					Particle.SetShade("6d6d6d");
				}			
			
				
			}
			Stop;
	}
}

Class RMD_LocustRocketTrailFire : RMD_BaseParticle
{
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 0 
			{
			
				let CVARS = RMD_CVARHandler(StaticEventHandler.Find('RMD_CVARHandler'));
				int CVAR_LowQuality = CVARS.RMDV_ParticleLowQuality;;
		
				if (CVAR_LowQuality == 1)
				{
					Return;
				}
				
				if (true)
				{
					Vector3 PVel = (FRandom[FX](-0.1, 0.1), FRandom[FX](-0.1, 0.1), FRandom[FX](-0.1, 0.1)).unit()*FRandom[FX](0.05, 0.05);
					Vector3 RPos = (frandom(0, 0), frandom(0, 0), frandom(0, 0));
					let Particle = Spawn("RMD_Smoke", Pos + RPos);
					
					Particle.Vel = PVel;
					Particle.Scale = (0.18, 0.18);
					Particle.A_SetRenderStyle(1.0, STYLE_AddShaded);
					Particle.SetShade("ff8f19");
				}				
				
			}
			Stop;
	}
}



Class RMD_LocustRL_Flare : RMD_BaseParticle
{

	Default
	{
		RenderStyle "AddShaded";
		Alpha 0.99;
		+Bright;
	}
	
	Override Void Tick()
	{
		Super.Tick();
		
		//Code taken from Lambda mod, thanks.
		if (!isFrozen())
		{
				
			if (Scale.X < 1.5 || Scale.Y < 1.5)
			{
				A_SetScale(Scale.X * 1.01, Scale.Y * 1.01);
			}
				
			if	(Target || (Target && Target.Health>0))
			{
				A_Warp(AAPTR_TARGET, flags:WARPF_INTERPOLATE);
			}
			
			else
			{
				Destroy();
			}
		}
	}
	
	States
	{
		Spawn:
			LENS BB 1 NoDelay;
			Loop;
	}
}


