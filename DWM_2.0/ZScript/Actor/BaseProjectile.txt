//------------------------------------------------------------------------------
//Dynamic Damage Falloff effect
//------------------------------------------------------------------------------
Class RMD_DamageFalloff 
{
	static float Calc(int SpawnHealth)
	{	
		return RMD_Math.Log(5, 3);
	}
}

//------------------------------------------------------------------------------
//Base Bullet
//------------------------------------------------------------------------------
Class RMD_BaseBullet : FastProjectile
{
	int ImpDamage; //Impact Damage
	int HealthDamage; //At which point the DamageMin overtakes normal damage
	float DamageRand; //The randomizer value
	bool ExtremeDeath;

	//Properties
	property ImpactDamage:ImpDamage;
	property HealthDamage:HealthDamage;
	property DamageRand:DamageRand;
	property ExtremeDeath:ExtremeDeath;

	Default
	{
		Height 3;
		Radius 3;
		Speed 100;
		MissileHeight 8;
		//MissileType "RMD_BulletSmoke";
		ProjectileKickBack 22;
		PROJECTILE;
		Decal "Bulletchip";
		RenderStyle "Add";
		+BRIGHT;
	}
	
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		float CVAR_BulletDamage = CVar.FindCVar("RMDC_BulletDamage").GetFloat();
		
		ImpDamage *= FRandom(1.0, DamageRand);	
		ImpDamage *= CVAR_BulletDamage;
	}
	
	
	
	//Add damage fall off effect against strong monsters
	Override int SpecialMissileHit (Actor Victim)
	{
		int VictimHP = Victim.SpawnHealth();
		int GibHealth = Victim.GetGibHealth();
		int NewDamage = ImpDamage; 
		
		Class<Actor> BloodEffect = Victim.GetBloodType(0);
		Actor Bloody;
		
		if (!Victim.player && Victim.BShootable)
		{
			//Prevent the blood spawning.
			
			if (!Victim.BNoblood && BloodEffect)
			{
				Bloody = Spawn(BloodEffect, Pos);
				
				Bloody.Translation = Victim.BloodTranslation;	
			}
		
			//TODO: Add support for "non bleeding" blood actors
			else if (!BloodEffect || Victim.BNoblood)
			{
				Spawn("RMD_BulletImpact", Pos);
			}

			//Prevent overkill from small arms
			if (bExtremeDeath == true && ImpDamage > VictimHP)
				NewDamage += VictimHP; 
					
			if (bExtremeDeath == false && ImpDamage >= abs(VictimHP))
				ImpDamage = VictimHP;
					
			victim.DamageMobj(self, target, ImpDamage, damagetype, 0);
				
			return MHIT_DESTROY;
		}

		//Pass through objects that cannot be shooted down.
		else if (!Victim.Player || !Victim.BShootable)
		{
			return MHIT_PASS;
		}

		//Else return something else.
		return MHIT_DEFAULT;
	}
		
	
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay;
		Goto Spawn1;	
	Spawn1:
		PUFF A 1;
		Loop;
	Death: //Wall
		TNT1 A 0 A_SpawnItemEx("RMD_BulletImpact", 0, 0, 1);
		TNT1 A 0 A_StartSound("Bullet/Impact");
		Stop;
	Crash: //Non Bleeding
		TNT1 A 0 A_SpawnItemEx("RMD_BulletImpact", 0, 0, 1);
		TNT1 A 0 A_StartSound("Bullet/Armor");
		Stop;
	XDeath: //Bleeding
		//TNT1 A 0 A_SpawnItemEx("RMD_BulletImpact", 0, 0, 1);
		TNT1 A 0 A_StartSound("Bullet/Flesh");
		Stop;
	}
	
}


Class RMD_BasebulletFlare : RMD_BaseParticle
{

	Default
	{
		RenderStyle "AddShaded";
		Alpha 0.5;
		Scale 0.135;
		+Bright;
	}
	
	Override Void Tick()
	{
		Super.Tick();
		
		//Code taken from Lambda mod, thanks.
		if (!isFrozen())
		{				
			if	(Target || (Target && Target.Health>0))
			{
				A_Warp(AAPTR_TARGET, flags:WARPF_INTERPOLATE);
			}
			
			else
			{
				Destroy();
			}
		}
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 0;
		Spawn2:
			LENS BB 1;
			Loop;
	}
}


//------------------------------------------------------------------------------
//Base Projectile
//------------------------------------------------------------------------------
Class BaseProjectileFast : FastProjectile
{
	int ImpDmg; //Impact Damage
	int SplashDmg; //Splash Damage
	int FSplashDmg; //Full Damage
	int SplashRad; //Splash Radius

	float NerfDmgRand; //Nerfed damage randomizer
	float NormalDmgRand; //Normal damage randomizer
	
	property ImpactDamage:ImpDmg;
	property SplashDamage:SplashDmg;
	property FullSplashDamage: FSplashDmg;
	property SplashRadius:SplashRad;
	property NerfDamageRandom:NerfDmgRand;
	property NormalDamageRandom:NormalDmgRand;
	
	//Mixin FastProjectileTick;
	
	Default
	{
		Speed 10;
		Radius 8;
		Height 8;
		SeeSound "";
		DeathSound "";
		Gravity 0.0;
		ProjectileKickback 40;
		MissileHeight 8;
		Decal "RMD_SmallExplosion";
		Projectile;
		-DEHEXPLOSION;
		-ROCKETTRAIL;
		-NOGRAVITY;
		+FORCERADIUSDMG;
	}

	States
	{
	Spawn:
		IDLE A 1 NoDelay;
		Stop;
	Death:
		TNT1 A 0 A_Explode(SplashDmg * Frandom(1.0, NormalDmgRand), SplashRad, XF_HURTSOURCE, 1, FSplashDmg);			
		TNT1 A 0 A_Jump(256, "Explode");
		Goto Explode;
	Explode:
		TNT1 A 0;
		Stop;
	}
}


Class BaseProjectile : Actor
{
	int ImpDmg; //Impact Damage
	int SplashDmg; //Splash Damage
	int FSplashDmg; //Full Damage
	int SplashRad; //Splash Radius

	float NerfDmgRand; //Nerfed damage randomizer
	float NormalDmgRand; //Normal damage randomizer
	
	property ImpactDamage:ImpDmg;
	property SplashDamage:SplashDmg;
	property FullSplashDamage: FSplashDmg;
	property SplashRadius:SplashRad;
	property NerfDamageRandom:NerfDmgRand;
	property NormalDamageRandom:NormalDmgRand;
	
	Default
	{
		Speed 10;
		Radius 8;
		Height 8;
		SeeSound "";
		DeathSound "";
		Gravity 0.0;
		ProjectileKickback 40;
		Decal "RMD_SmallExplosion";
		Projectile;
		-DEHEXPLOSION;
		-ROCKETTRAIL;
		-NOGRAVITY;
		+FORCERADIUSDMG;
	}

	States
	{
	Spawn:
		IDLE A 1 NoDelay;
		Stop;
	Death:
		TNT1 A 0 A_Explode(SplashDmg * Frandom(1.0, NormalDmgRand), SplashRad, XF_HURTSOURCE, 1, FSplashDmg);			
		TNT1 A 0 A_Jump(256, "Explode");
		Goto Explode;
	Explode:
		TNT1 A 0;
		Stop;
	}
}

//------------------------------------------------------------------------------
//Light Explosives
//------------------------------------------------------------------------------
Class LightExplosives : BaseProjectile
{

	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		let CVARS = RMD_CVARHandler(StaticEventHandler.Find('RMD_CVARHandler'));
		float CVAR_LightExplosiveDamage = 1.0;
		
		if (CVARS)
		{
			CVAR_LightExplosiveDamage = CVARS.RMDV_LightExplosiveDamage;
		}	
	
		//Impact Damage
		ImpDmg *= FRandom(1.0, NormalDmgRand);
		ImpDmg *= CVAR_LightExplosiveDamage;
				
		//Splash Damage
		SplashDmg *= FRandom(1.0, NormalDmgRand);	
		SplashDmg *= CVAR_LightExplosiveDamage;
	}
	
	Default
	{
		DamageType "Explosive";
	}

}


Class LightExplosivesFast : BaseProjectileFast
{

	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		let CVARS = RMD_CVARHandler(StaticEventHandler.Find('RMD_CVARHandler'));
		float CVAR_LightExplosiveDamage = 1.0;
		
		if (CVARS)
		{
			CVAR_LightExplosiveDamage = CVARS.RMDV_LightExplosiveDamage;
		}	
	
		//Impact Damage
		ImpDmg *= FRandom(1.0, NormalDmgRand);
		ImpDmg *= CVAR_LightExplosiveDamage;
				
		//Splash Damage
		SplashDmg *= FRandom(1.0, NormalDmgRand);	
		SplashDmg *= CVAR_LightExplosiveDamage;
	}
	
	Default
	{
		DamageType "Explosive";
	}

}
//------------------------------------------------------------------------------
//Heavy Explosives
//------------------------------------------------------------------------------
Class HeavyExplosives : BaseProjectile
{

	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		let CVARS = RMD_CVARHandler(StaticEventHandler.Find('RMD_CVARHandler'));
		float CVAR_HeavyExplosiveDamage = 1.0;
		
		if (CVARS)
		{
			CVAR_HeavyExplosiveDamage = CVARS.RMDV_HeavyExplosiveDamage;
		}	
	
		//Impact Damage
		ImpDmg *= FRandom(1.0, NormalDmgRand);
		ImpDmg *= CVAR_HeavyExplosiveDamage;
				
		//Splash Damage
		SplashDmg *= FRandom(1.0, NormalDmgRand);	
		SplashDmg *= CVAR_HeavyExplosiveDamage;
	}
	
	Default
	{
		DamageType "Explosive";
	}

}


Class HeavyExplosivesFast : BaseProjectileFast
{

	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		let CVARS = RMD_CVARHandler(StaticEventHandler.Find('RMD_CVARHandler'));
		float CVAR_HeavyExplosiveDamage = 1.0;
		
		if (CVARS)
		{
			CVAR_HeavyExplosiveDamage = CVARS.RMDV_HeavyExplosiveDamage;
		}	
	
		//Impact Damage
		ImpDmg *= FRandom(1.0, NormalDmgRand);
		ImpDmg *= CVAR_HeavyExplosiveDamage;
				
		//Splash Damage
		SplashDmg *= FRandom(1.0, NormalDmgRand);	
		SplashDmg *= CVAR_HeavyExplosiveDamage;
	}
	
	Default
	{
		DamageType "Explosive";
	}

}


